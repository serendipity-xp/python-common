# -*- coding:utf-8 -*-import weakrefimport gcfrom pprint import pprintclass Graph(object):    def __init__(self, name):        self.name = name        self.other = None    def set_next(self, other):        print "%s.set_next(%r)" % (self.name, other)        self.other = other    def all_nodes(self):        yield self        n = self.other        while n and n.name !=self.name:            yield n            n = n.other        if n is self:            yield n        return    def __str__(self):        return "->".join(n.name for n in self.all_nodes())    def __repr__(self):        return "<%s at 0x%x name=%s>" % (self.__class__.__name__, id(self), self.name)    def __del__(self):        print "(Deleting %s)" % self.namedef collect_and_show_garbage():    print "Collecting..."    print "unreachable objects:", gc.collect()  # 收集垃圾    print "garbage:", pprint(gc.garbage)  # gc.garbage 获取垃圾列表class WeakGraph(Graph):    def set_next(self, other):        if other is not None:            if self in other.all_nodes():                other = weakref.proxy(other)        super(WeakGraph, self).set_next(other)        returndef demo(graph_factory):    print "Set up graph:"    one = graph_factory("one")    two = graph_factory("two")    three = graph_factory("three")    one.set_next(two)    two.set_next(three)    three.set_next(one)    print "Graph:"    print '第一次打印One:', str(one)    collect_and_show_garbage()    print    three = None    two = None    print "After 2 references removed"    print '第二次打印One:', str(one)    collect_and_show_garbage()    print    print "removeing last reference"    one = None    collect_and_show_garbage()if __name__ == '__main__':    gc.set_debug(gc.DEBUG_LEAK)    print "Setting up the cycle"    print    demo(WeakGraph)    print    print "breaking the cycle and cleaning up garbage"    print    # gc.garbage[0].set_next(None)    # while gc.garbage:    #     del gc.garbage[0]    # print collect_and_show_garbage()